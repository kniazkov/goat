/*

Copyright (C) 2017-2020 Ivan Kniazkov

This file is part of interpreter of programming language
codenamed "Goat" ("Goat interpreter").

Goat interpreter is free software: you can redistribute it and/or
modify it under the terms of the GNU General Public License as published
by the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

Goat interpreter is distributed in the hope that it will be
useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License along
with Goat interpreter.  If not, see <http://www.gnu.org/licenses/>.

*/

var StepperMotorParameters =
# {
    init : $()
    {
        this.gpioEnable = "null";
        this.gpioStep = "null";
        this.gpioDirection = "null";
        this.scalingFactor = 1.0;
        this.bitEnabling = true;
        this.forwardDirection = true;
        this.minInterval = 25000;
    }
};

var StepperMotor =
# {
    init : $(params)
    {
        if (!params.instanceof(StepperMotorParameters))
            throw new Exception.IllegalArgument();

        for (var key in params)
        {
            if (params.contains(key))
                this[key] = params[key];
        }

        this.backwardDirection = !forwardDirection;

        this.savedPosition = 0;
        this.savedScaledPosition = 0;        
        this.savedTime = 0;    
        this.savedDirection = null;
    },

    powerOn : $()
    {
        ports[gpioEnable].write(bitEnabling);
    },
    
    powerOff : $()
    {
        ports[gpioEnable].write(!bitEnabling);
    },

    getPosition : $()
    {
        return ports[gpioStep].count() / scalingFactor / 2;
    },
    
    addTargetPosition : $(position, time)
    {
        var deltaTime = time - savedTime;
        if (deltaTime <= 0)
            return;
        var startTime = savedTime;

        if (position == savedPosition)
        {
            savedTime = time;
            return;
        }
        
        var scaledPosition = round(position * scalingFactor) * 2;
        var steps = scaledPosition - savedScaledPosition;
        if (steps == 0)
        {
            savedTime = time;
            return;
        }
        savedPosition = position;
        savedScaledPosition = scaledPosition;
        var direction;
        if (steps > 0)
        {
            direction = 1;
        }
        else
        {
            direction = -1;
            steps = -steps;
        }
        
        var interval = round(deltaTime / steps);
        savedTime = savedTime + interval * steps;
        
        if (direction > 0)
        {
            if (savedDirection != direction)
            {
                savedDirection = direction;
                ports[gpioDirection].schedule(startTime, forwardDirection);
            }
            ports[gpioStep].pulse(startTime, interval, steps, 1);
        }
        else
        {
            if (savedDirection != direction)
            {
                savedDirection = direction;
                ports[gpioDirection].schedule(startTime, backwardDirection);
            }
            ports[gpioStep].pulse(startTime, interval, steps, -1);
        }
    },
    
    getMaxVelocity : $()
    {
        var stepsPerMm = scalingFactor * 2;
        return minInterval / stepsPerMm;
    }
};
