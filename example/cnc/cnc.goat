var resolution = 5.0;
var acceleration = 0; //200.0;
var powerOnDelayNs = 3 * 1000000000;

import "stepper_motor.goat";
import "positioning.goat";
import "gcode.goat";
import "interpolator.goat";
import "io.goat";
import "queue.goat";
import "atomic.goat";
import "timer.goat";


if (!ports.init())
    exit();

var smpX1 = new StepperMotorParameters();
smpX1.gpioEnable = "gpio23";
smpX1.gpioStep = "gpio25";
smpX1.gpioDirection = "gpio12";
smpX1.scalingFactor = 213.93;
smpX1.bitEnabling = false;
smpX1.forwardDirection = false;
var axisX1 = new StepperMotor(smpX1);

var smpX2 = new StepperMotorParameters();
smpX2.gpioEnable = "gpio6";
smpX2.gpioStep = "gpio13";
smpX2.gpioDirection = "gpio5";
smpX2.scalingFactor = 213.93;
smpX2.bitEnabling = false;
smpX2.forwardDirection = false;
var axisX2 = new StepperMotor(smpX2);

var smpY = new StepperMotorParameters();
smpY.gpioEnable = "gpio27";
smpY.gpioStep = "gpio4";
smpY.gpioDirection = "gpio18";
smpY.scalingFactor = 213.93;
smpY.bitEnabling = false;
smpY.forwardDirection = false;
var axisY = new StepperMotor(smpY);

var smpZ = new StepperMotorParameters();
smpZ.gpioEnable = "gpio17";
smpZ.gpioStep = "gpio24";
smpZ.gpioDirection = "gpio22";
smpZ.scalingFactor = 6666.66;
smpZ.bitEnabling = false;
smpZ.forwardDirection = false;
var axisZ = new StepperMotor(smpZ);

var positioning = new Positioning(axisX1, axisX2, axisY, axisZ);


var raw = load("gcode.txt");
var source = raw.decode("utf8");

var gcode = GCode.parse(source);
gcode = GCode.optimize(gcode, resolution);
//var sections = GCode.split(gcode);
var sections = new Queue();
sections.push(gcode);

var p0 = new Interpolator.Point();
p0.X = axisX1.getPosition();
p0.Y = axisY.getPosition();
p0.Z = axisZ.getPosition();

var power = false;
var trajectories = new Queue();
var calculated = new Atomic(false);

var thrExecutor = $$()
{
    do
    {
        var points = null;
        var flag;
        
        lock
        {
            if (!trajectories.empty())
                points = trajectories.pop();
        }
        if (!points)
        {
            if (false == calculated.get())
            {
                Console.cret();
                Console.println("Executor suspended until the trajectory calculated");
                executor.suspend();
            }
            else
            {
                break;
            }
        }
        else
        {
            calculator.suspend();
            positioning.schedule(points);
            Console.cret();
            Console.println("Press 'Enter' to continue...");
            gets();
            calculator.resume();
            
            var powerOnTimestamp = null;
            if (!power)
            {
                axisX1.powerOn();
                axisX2.powerOn();
                axisY.powerOn();
                axisZ.powerOn();
                power = true;
                powerOnTimestamp = clock();
            }

            if (powerOnTimestamp)
            {
                flag = false;
                while(clock() - powerOnTimestamp < powerOnDelayNs)
                {
                    if (!flag)
                    {
                        flag = true;
                        Console.cret();
                        Console.println("Executor is waiting while motors power on");
                    }
                }
            }
            
            positioning.run();
            
            flag = false;            
            while(ports.busy())
            {
                if (false == calculated.get())
                {
                    if (!flag)
                    {
                        flag = true;
                        Console.cret();
                        Console.println("Executor is working in the background");
                    }
                    /*
                    Timer.setTimer($()
                    {
                        executor.resume();
                    }, new Timer.Milliseconds(500));
                    executor.suspend();
                    */
                    var thrPause = $$()
                    {
                        executor.resume();
                    };
                    thrPause.delay(250000000);
                    executor.suspend();
                }
                else
                {
                    var status = positioning.getStatus();
                    if (status)
                    {
                        Console.cret();
                        Console.print(status);
                    }
                }
            }
        }
    } while(true);
    
    if (power)
    {
        axisX1.powerOff();
        axisX2.powerOff();
        axisY.powerOff();
        axisZ.powerOff();
    }
    Console.cret();
    Console.println("Done");
};
var executor = thrExecutor.run();

var thrCalculator = $$()
{
    var size = sections.size();
    var k = 0;
    while (!sections.empty())
    {
        k++;
        Console.cret();
        Console.println("Section " + k + " of " + size);
        var section = sections.pop();
        var points = Interpolator.calculate(section, p0, resolution, axisX1.getMaxVelocity(), axisZ.getMaxVelocity(), acceleration);
        var count = points.length();
        if (count > 0)
        {
            p0 = points[count - 1];
            lock
            {
                trajectories.push(points);
                if (!executor.works())
                {
                    Console.cret();
                    Console.println("Executor resumed");
                    executor.resume();
                }
            }
        }
    }
    calculated.set(true);
};
var calculator = thrCalculator.run();

