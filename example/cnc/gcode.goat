/*

Copyright (C) 2017-2020 Ivan Kniazkov

This file is part of interpreter of programming language
codenamed "Goat" ("Goat interpreter").

Goat interpreter is free software: you can redistribute it and/or
modify it under the terms of the GNU General Public License as published
by the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

Goat interpreter is distributed in the hope that it will be
useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License along
with Goat interpreter.  If not, see <http://www.gnu.org/licenses/>.

*/

import "algorithm.goat";

var GCode =
# {
    parse : $(string)
    {
        if (!string.instanceof(String))
            throw new Exception.IllegalArgument();
        var result = [];
        var lines = string.split("\n");
        var row = 0;
        for (var line in lines)
        {
            row++;
            line = line.trim();
            var n = line.length();
            if (n > 0 && indexOf(line, '(') != -1)
            {
                var tmp = new StringBuilder();
                var flag = false;
                for (var k = 0; k < n; k++)
                {
                    if (flag)
                    {
                        if (line == '(')
                            throw new GCode.Error(GCode.Error.ILLEGAL_CHARACTER, line, row, '(');
                        if (line[k] == ')')
                            flag = false;
                    }
                    else
                    {
                        var c = line[k];
                        if (c == '(')
                            flag = true;
                        else
                            tmp << c;
                    }
                }
                if (flag)
                    throw new GCode.Error(GCode.Error.UNCLOSED_PARENTHESIS, line, row);
                line = tmp.string();
                line = line.trim();
                n = line.length();
            }
            if (n > 0)
            {
                var k = 0;
                var instr = new GCode.Instruction();
                while(k < n)
                {
                    var c = line[k++];
                    var descr = _codes[c];
                    if (!descr)
                        throw new GCode.Error(GCode.Error.UNKNOWN_CODE, line, row, c);
                    if (descr.code)
                    {
                        var intVal = 0;
                        var sign = 1;
                        c = k < n ? line[k] : null;
                        if (c == '-')
                        {
                            sign = -1;
                            k++;
                            c = k < n ? line[k] : null;
                        }
                        if (!c || !(c >= '0' && c <= '9'))
                            throw new GCode.Error(GCode.Error.ILLEGAL_SEQUENCE, line, row);
                        do
                        {
                            intVal = intVal * 10 + Integer.valueof(c) - Integer.valueof('0');
                            k++;
                            c = k < n ? line[k] : null;
                        } while(c && c >= '0' && c <= '9');
                        if (c == '.')
                        {
                            if (!descr.real)
                                throw new GCode.Error(GCode.Error.ILLEGAL_PARAMETER, line, row);
                            var fractVal = 0;
                            var divisor = 1;
                            k++;
                            c = k < n ? line[k] : null;
                            while(c && c >= '0' && c <= '9')
                            {
                                fractVal = fractVal * 10 + Integer.valueof(c) - Integer.valueof('0');
                                divisor = divisor * 10;
                                k++;
                                c = k < n ? line[k] : null;
                            }
                            instr[descr.code] = sign * (intVal + Real.valueof(fractVal) / divisor);
                        }
                        else
                        {
                            if (descr.mult)
                            {
                                if (!instr[descr.code])
                                    instr[descr.code] = [];    
                                instr[descr.code].push(intVal * sign);
                            }
                            else
                            {
                                instr[descr.code] = intVal * sign;
                            }
                        }
                    }
                }
                result.push(instr);
            }
        }
        return result;
    },

    _codes :
    {
        ' ' : { code : null },
        '\t' : { code : null },
        'g' : { code : "G", mult : true },
        'G' : { code : "G", mult : true },
        'm' : { code : "M", mult : true },
        'M' : { code : "M", mult : true },
        'x' : { code : "X", real : true },
        'X' : { code : "X", real : true },
        'y' : { code : "Y", real : true },
        'Y' : { code : "Y", real : true },
        'z' : { code : "Z", real : true },
        'Z' : { code : "Z", real : true },
        'i' : { code : "I", real : true },
        'I' : { code : "I", real : true },
        'j' : { code : "J", real : true },
        'J' : { code : "J", real : true },
        'f' : { code : "F", real : true },
        'F' : { code : "F", real : true },
        't' : { code : "T" },
        'T' : { code : "T" }
    }, 

    Instruction :
    {
        G : null,
        M : null,
        X : null,
        Y : null,
        Z : null,
        I : null,
        J : null,
        F : null,
        T : null,

        toString : $()
        {
            var b = new StringBuilder();
            if (this.G != null)
            {
                for(var g in G)
                {
                    if (b.length() > 0)
                        b << ' ';
                    b << 'G' << (g < 10 ? "0" + g : g);
                }
            }

            for (var k in ["X", "Y", "Z", "I", "J", "F", "T"])
            {
                if (this[k] != null)
                {
                    if (b.length() > 0)
                        b << ' ';
                    b << k << this[k];
                }
            }

            if (this.M != null)
            {
                for(var m in M)
                {
                    if (b.length() > 0)
                        b << ' ';
                    b << 'M' << (m < 10 ? "0" + m : m);
                }
            }

            return b.string();
        }
    },

    Error : Exception ->
    {
        type : null,
        line : null,
        row : null,
        data : null,
        
        init : $(type, line, row, data)
        {
            this.type = type;
            this.line = line;
            this.row = row;
            this.data = data;
        },
        
        ILLEGAL_CHARACTER : "illegal character",
        ILLEGAL_SEQUENCE : "illegal sequence",
        ILLEGAL_PARAMETER : "illegal parameter",
        UNCLOSED_PARENTHESIS : "unclosed parenthesis",
        UNKNOWN_CODE : "unknown code",
        INCOMPATIBLE_CODE : "incompatible code"
    }
};


