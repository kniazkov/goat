/*

Copyright (C) 2017-2020 Ivan Kniazkov

This file is part of interpreter of programming language
codenamed "Goat" ("Goat interpreter").

Goat interpreter is free software: you can redistribute it and/or
modify it under the terms of the GNU General Public License as published
by the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

Goat interpreter is distributed in the hope that it will be
useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License along
with Goat interpreter.  If not, see <http://www.gnu.org/licenses/>.

*/

import "stepper_motor.goat";

var Positioning =
# {
    init : $(axisX1, axisX2, axisY, axisZ, resolution)
    {
        if (!axisX1.instanceof(StepperMotor) || !(axisX2 == void || axisX2.instanceof(StepperMotor)) ||
                !axisY.instanceof(StepperMotor) || !axisZ.instanceof(StepperMotor))
            throw new Exception.IllegalArgument();

        this.axisX1 = axisX1;
        this.axisX2 = axisX2;
        this.axisY = axisY;
        this.axisZ = axisZ;
        this.minDistance = 1.0 / resolution / 2;
    },

    dir : $(n)
    {
        if (n == 0)
            return 0;
        else if (n < 0) return -1; else return 1;
    },

    moveTo : $(X, Y, Z, V)
    {
        if (V <= 0)
            throw new Exception.IllegalArgument();

        // current position
        var cX = axisX1.getPosition();
        var cY = axisY.getPosition();
        var cZ = axisZ.getPosition();

        // delta
        var dX = X - cX;
        var dY = Y - cY;
        var dZ = Z - cZ;

        // direction
        var rX = dir(dX);
        var rY = dir(dY);
        var rZ = dir(dZ);       

        // distance
        var l = sqrt(dX * dX + dY * dY + dZ * dZ);

        while(l > minDistance)
        {
            // time
            var t = l / V;

            // speed for each axis
            var vX = dX / t;
            var vY = dY / t;
            var vZ = dZ / t;

            // set 
            axisX1.setVelocity(vX);
            if (axisX2) axisX2.setVelocity(-vX);
            axisY.setVelocity(vY);
            axisZ.setVelocity(vZ);

            // new position
            cX = axisX1.getPosition();
            cY = axisY.getPosition();
            cZ = axisZ.getPosition();

            // new delta
            dX = X - cX;
            if (rX != dir(dX)) dX = 0;
            dY = Y - cY;
            if (rY != dir(dY)) dY = 0;
            dZ = Z - cZ;
            if (rZ != dir(dZ)) dZ = 0;

            // new distance
            l = sqrt(dX * dX + dY * dY + dZ * dZ);
        }
    },

    run : $(trajectory, callback)
    {

        for (var k = 0, kl = trajectory.length(); k < kl; k++)
        {
            var p = trajectory[k];
            if (callback)
                callback(p);
            positioning.moveTo(p.X, p.Y, p.Z, p.V);
        }
    }
};
