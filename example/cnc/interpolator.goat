/*

Copyright (C) 2017-2020 Ivan Kniazkov

This file is part of interpreter of programming language
codenamed "Goat" ("Goat interpreter").

Goat interpreter is free software: you can redistribute it and/or
modify it under the terms of the GNU General Public License as published
by the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

Goat interpreter is distributed in the hope that it will be
useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License along
with Goat interpreter.  If not, see <http://www.gnu.org/licenses/>.

*/

import "gcode.goat";
import "algorithm.goat";

var Interpolator = 
{
    calculate : $(gcode, p0, resolution, velocity, acceleration)
    {
        if (!gcode.instanceof(Array))
            throw new Exception.IllegalArgument();
        
        var points = [];

        // 1. build array

        for (var i in gcode)
        {
            try
            {
                if (i.G)
                {
                    var rapid = false;
                    var linear = false;
                    var circular = false;
                    var clockwise = false;
                    
                    if (indexOf(i.G, 0) != -1)
                    {
                        linear = true;
                        rapid = true;
                    }
                    else if (indexOf(i.G, 1) != -1)
                    {
                        linear = true;
                    }
                    else if (indexOf(i.G, 2) != -1)
                    {
                        circular = true;
                        clockwise = true;
                    }
                    else if (indexOf(i.G, 3) != -1)
                    {
                        circular = true;
                    }

                    var sequence = null;

                    if (linear)
                    {
                        var p1 = new this.Point();
                        p1.X = i.X || p0.X;
                        p1.Y = i.Y || p0.Y;
                        p1.Z = i.Z || p0.Z;
                        sequence = this.linearInterpolator(p0, p1, resolution);
                        p0 = p1;
                    }
                    else if (circular)
                    {
                        var p1 = new this.Point();
                        p1.X = i.X || p0.X;
                        p1.Y = i.Y || p0.Y;
                        p1.Z = i.Z || p0.Z;
                        var p2 = new this.Point();
                        p2.X = p0.X + (i.I || 0);
                        p2.Y = p0.Y + (i.J || 0);
                        p2.Z = p0.Z;
                        sequence = this.circularInterpolator(p0, p1, p2, clockwise, resolution);
                        p0 = p1;
                    }

                    for (var p in sequence)
                    {
                        p.instruction = i;
                        p.rapid = rapid;
                        p.V = velocity;
                        points.push(p);
                    }
                }
            }
            catch (e)
            {
                println("can't calculate: '" + i.toString() + "', " + e);
            }
        }

        // 2. calculate acceleration
        
        if (acceleration && points.length() >= 3)
        {
            // set distance and delete all points with zero distance
            var aux = [];
            var p0 = points[0];
            p0.distance = 0;
            aux.push(p0);
            for (var k = 1, kl = points.length(); k < kl; k++)
            {
                var p1 = points[k];
                var distance = p1.distance(p0);
                if (distance != 0)
                {
                    p1.distance = distance;
                    aux.push(p1);
                }
                p0 = p1;
            }

            var count = aux.length();
            if (count < 3)
                return points;

            // calculate max velocity
            aux[0].V = minVelocity;
            aux[count - 1].V = minVelocity;
            for (var k = 1; k < count - 1; k++)
            {
                this.calculateVelocity(aux[k - 1], aux[k], aux[k + 1], acceleration, 1);
            }

            points = aux;
        }

        return points;
    },

    Point :
    {
        instruction : null,
        rapid : null,
        percent : null,
        X : 0.0,
        Y : 0.0,
        Z : 0.0,
        V : 0.0,

        distance : $(p0, p1)
        {
            if (!p1)
            {
                var dX = X - p0.X;
                var dY = Y - p0.Y;
                var dZ = Z - p0.Z;
                return sqrt(dX * dX + dY * dY + dZ * dZ);
            }
            else
            {
                var dX = p1.X - p0.X;
                var dY = p1.Y - p0.Y;
                var dZ = p1.Z - p0.Z;
                return sqrt(dX * dX + dY * dY + dZ * dZ);
            }
        }
    },

    linearInterpolator : $(p0, p1, resolution)
    {
        var q = [];

        // delta
        var dX = Real.valueof(p1.X - p0.X);
        var dY = Real.valueof(p1.Y - p0.Y);
        var dZ = Real.valueof(p1.Z - p0.Z);

        // distance
        var l = sqrt(dX * dX + dY * dY + dZ * dZ);

        // count
        var cnt = round(l * resolution);
        if (cnt == 0)
        {
            q.push(p1);
            p1.percent = 100.0;
            return q;
        }

        // increments
        var iX = dX / cnt;
        var iY = dY / cnt;
        var iZ = dZ / cnt;

        // generate
        var total = cnt;
        while(cnt > 0)
        {
            var p = new this.Point();
            p.percent = 100.0 * (total - cnt + 1) / total;
            p.X = p0.X + iX;
            p.Y = p0.Y + iY;
            p.Z = p0.Z + iZ;
            q.push(p);
            p0 = p;
            cnt--;
        }

        return q;
    },

    circularInterpolator : $(p0, p1, c, cw, resolution)
    {
        var q = [];

        // radius
        var r0 = this.Point.distance(p0, c);
        var r1 = this.Point.distance(p1, c);

        // angle
        var a0 = atan2(p0.Y - c.Y, p0.X - c.X);
        var a1 = atan2(p1.Y - c.Y, p1.X - c.X);
        var dA = a1 - a0;
        if (cw && dA > 0)
            dA -= 2 * PI;
        else if (!cw && dA < 0)
            dA += 2 * PI;

        // distance
        var l = abs(dA * (r0 + r1) / 2);

        // count
        var cnt = round(l * resolution);
        if (cnt == 0)
        {
            q.push(p1);
            p1.percent = 100.0;
            return q;
        }

        // increments
        var iR = (r1 - r0) / cnt;
        var iA = dA / cnt;

        // generate
        var a = a0;
        var r = r0;
        var total = cnt;
        while(cnt > 0)
        {
            var p = new this.Point();
            r += iR;
            a += iA;
            p.percent = 100.0 * (total - cnt + 1) / total;
            p.X = cos(a) * r + c.X;
            p.Y = sin(a) * r + c.Y;
            p.Z = p0.Z;
            q.push(p);
            cnt--;
        }

        return q;
    },

    minVelocity : 0.1,

    calculateVelocity : $(prev, point, next, acceleration, delta)
    {
        var V = point.V;
        while (V > minVelocity)
        {
            var t0 = point.distance / V;
            var vX0 = (point.X - prev.X) / t0;
            var vY0 = (point.Y - prev.Y) / t0;
            var vZ0 = (point.Z - prev.Z) / t0;

            var t1 = next.distance / V;
            var vX1 = (next.X - point.X) / t1;
            var vY1 = (next.Y - point.Y) / t1;
            var vZ1 = (next.Z - point.Z) / t1;

            var aX = (vX1 - vX0) / t1;
            var aY = (vY1 - vY0) / t1;
            var aZ = (vZ1 - vZ0) / t1;

            if (abs(aX) < acceleration && abs(aY) < acceleration && abs(aZ) < acceleration)
            {
                point.V = V;
                return;
            }

            V = V - delta;
        }

        point.V = minVelocity;
    }
};