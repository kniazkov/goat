import "grammar.goat";

try {

    var grammar = new Grammar();

    var A = grammar.createTag("A");
    var B = grammar.createTag("B");
    var C = grammar.createTag("C");
    var D = grammar.createTag("D");
    var E = grammar.createTag("E");
    var F = grammar.createTag("F");

    var _A = Grammar.Terminal -> {
        tag : A
    };

    var _B = Grammar.Terminal -> {
        tag : B
    };

    var _C = Grammar.Terminal -> {
        tag : C
    };

    var _D = Grammar.Terminal -> {
        tag : D
    };

    var _E = Grammar.NonTerminal -> {
        tag : E
    };

    var _F = Grammar.NonTerminal -> {
        tag : F
    };

    var source = "AAAABCDCBAAAA";
    var sequence = grammar.createSequence();

    for (var i = 0; i < source.length(); i++) {
        var token;
        switch(source[i]) {
            case 'A':
                token = new _A(); break;
            case 'B':
                token = new _B(); break;
            case 'C':
                token = new _C(); break;
            case 'D':
                token = new _D(); break;
        }
        sequence.push(token);
    }

    var P_0 = A <-- B <-- C <-- D --> C --> B --> A --|> _E;
    println(P_0.toString());

    var P_1 = B | A <-- A <-- E --> A | B | C --|> _F;
    println(P_1.toString());

    grammar.add([
        P_0,
        P_1
    ]);

    grammar.parse();
    var xml = sequence.toXML("ROOT");
    println(xml.toString("  "));
}
catch(e) {
    println(e);
    println(e.trace);
}