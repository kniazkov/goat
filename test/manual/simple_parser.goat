import "grammar.goat";

var grammar = new Grammar();

var DIGIT = grammar.createTag("DIGIT");
var PLUS = grammar.createTag("PLUS");
var MUL = grammar.createTag("MUL");
var BINARY = grammar.createTag("BINARY");

var Digit = Grammar.Terminal -> {
    tag : DIGIT,

    init : $(value) {
        this.value = value;
    },

    toString : $() {
        return String.valueOf(value);
    }
};

var Plus = Grammar.Terminal -> {
    tag : PLUS,

    toString : $() {
        return "+";
    }
};

var Mul = Grammar.Terminal -> {
    tag : MUL,

    toString : $() {
        return "*";
    }
};

var Binary = Grammar.NonTerminal -> {
    tag : BINARY
};

var source = "1+2*3";
var sequence = grammar.createSequence();

for (var i = 0; i < source.length(); i++) {
    var token;
    switch(source[i]) {
        case '0':
            token = new Digit(0); break;
        case '1':
            token = new Digit(1); break;
        case '2':
            token = new Digit(2); break;
        case '3':
            token = new Digit(3); break;
        case '4':
            token = new Digit(4); break;
        case '5':
            token = new Digit(5); break;
        case '6':
            token = new Digit(6); break;
        case '7':
            token = new Digit(7); break;
        case '8':
            token = new Digit(8); break;
        case '9':
            token = new Digit(9); break;
        case '+':
            token = new Plus(); break;
        case '*':
            token = new Mul(); break;
    }
    sequence.push(token);
}

grammar.add([
    DIGIT <-- MUL --> DIGIT --|> Binary,
    DIGIT <-- PLUS --> DIGIT --|> Binary
]);

grammar.parse();

for (var i = sequence.iterator(); i.valid(); i.next()) {
    println(i.read().toString());
}
