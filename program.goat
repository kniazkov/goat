//exit();

var resolution = 5.0;
var velocity = 30.0;
var acceleration = 60.0;

import "stepper_motor.goat";
import "positioning.goat";

if (!ports.init())
    exit();

ports.gpio4.pulse(0);

var smpX1 = new StepperMotorParameters();
smpX1.gpioEnable = "gpio23";
smpX1.gpioStep = "gpio25";
smpX1.gpioDirection = "gpio12";
smpX1.scalingFactor = 213.93;
var axisX1 = new StepperMotor(smpX1);

var smpX2 = new StepperMotorParameters();
smpX2.gpioEnable = "gpio6";
smpX2.gpioStep = "gpio13";
smpX2.gpioDirection = "gpio5";
smpX2.scalingFactor = 213.93;
var axisX2 = new StepperMotor(smpX2);

var smpY = new StepperMotorParameters();
smpY.gpioEnable = "gpio27";
smpY.gpioStep = "gpio4";
smpY.gpioDirection = "gpio18";
smpY.scalingFactor = 213.93;
var axisY = new StepperMotor(smpY);

var smpZ = new StepperMotorParameters();
smpZ.gpioEnable = "gpio17";
smpZ.gpioStep = "gpio24";
smpZ.gpioDirection = "gpio22";
smpZ.scalingFactor = 6666.66;
var axisZ = new StepperMotor(smpZ);

var positioning = new Positioning(axisX1, axisX2, axisY, axisZ, resolution);

import "gcode.goat";
import "io.goat";
import "interpolator.goat";
import "bitmap.goat";
import "color.goat";

var bmp = new Bmp24(2000, 1500);
//var raw = load("gcode.txt");
//var source = raw.decode("utf8");
//var source = "g00 x100 y100";

while(true)
{
    //print("? ");
    //var source = gets();
    var source = "g00 x100 y100\ng02x300y100i100";
    source = source.trim();
    if (source == "")
        continue;
    if (source == "q" || source == "quit")
        break;

    var gcode = null;
    try
    {
        gcode = GCode.parse(source);
    }
    catch(e)
    {
        println("\nCan't parse: " + e);
        continue;
    }
    gcode = GCode.optimize(gcode, resolution);
    var p0 = new Interpolator.Point();
    p0.X = axisX1.getPosition();
    p0.Y = axisY.getPosition();
    p0.Z = axisZ.getPosition();
    var points = Interpolator.calculate(gcode, p0, resolution, velocity, acceleration);

    positioning.run(points, $(p1)
    {
        Console.cret();
        if (p1.percent == 100)
        {
            Console.println(p1.instruction.toString());
        }
        else
        {
            Console.print("\'" + p1.instruction.toString() + "\', " + round(p1.percent) +
                "%, X: " + round(100 * axisX1.getPosition()) / 100.0 + ", Y: " + round(100 * axisY.getPosition()) / 100.0 + 
                ", V: " + p1.V);
        }
        var c = new Color();
        c.r = p1.V / velocity;
        c.b = 1.0 - c.r;
        bmp.drawLine(round(p0.X * 5), 1500 - round(p0.Y * 5), round(p1.X * 5), 1500 - round(p1.Y * 5), c);
        p0 = p1;
    });
    Console.println("Done, X: " + round(100 * axisX1.getPosition()) / 100.0 + ", Y: " + round(100 * axisY.getPosition()) / 100.0);
    var arr = bmp.toByteArray();
    var file = open("image.bmp", File.Mode.WRITE);
    file.write(arr);
    file.close();
    exit();
}
