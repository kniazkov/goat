var resolution = 5.0;
var acceleration = 200.0;

import "stepper_motor.goat";
import "positioning.goat";
import "gcode.goat";
import "interpolator.goat";
import "io.goat";


if (!ports.init())
    exit();

var smpX1 = new StepperMotorParameters();
smpX1.gpioEnable = "gpio23";
smpX1.gpioStep = "gpio25";
smpX1.gpioDirection = "gpio12";
smpX1.scalingFactor = 213.93;
smpX1.bitEnabling = false;
smpX1.forwardDirection = false;
var axisX1 = new StepperMotor(smpX1);

var smpX2 = new StepperMotorParameters();
smpX2.gpioEnable = "gpio6";
smpX2.gpioStep = "gpio13";
smpX2.gpioDirection = "gpio5";
smpX2.scalingFactor = 213.93;
smpX2.bitEnabling = false;
smpX2.forwardDirection = false;
var axisX2 = new StepperMotor(smpX2);

var smpY = new StepperMotorParameters();
smpY.gpioEnable = "gpio27";
smpY.gpioStep = "gpio4";
smpY.gpioDirection = "gpio18";
smpY.scalingFactor = 213.93;
smpY.bitEnabling = false;
smpY.forwardDirection = false;
var axisY = new StepperMotor(smpY);

var smpZ = new StepperMotorParameters();
smpZ.gpioEnable = "gpio17";
smpZ.gpioStep = "gpio24";
smpZ.gpioDirection = "gpio22";
smpZ.scalingFactor = 6666.66;
smpZ.bitEnabling = false;
smpZ.forwardDirection = false;
var axisZ = new StepperMotor(smpZ);

var positioning = new Positioning(axisX1, axisX2, axisY, axisZ);


var raw = load("gcode.txt");
var source = raw.decode("utf8");

var gcode = GCode.parse(source);
gcode = GCode.optimize(gcode, resolution);
var sections = GCode.split(gcode);

var p0 = new Interpolator.Point();
p0.X = axisX1.getPosition();
p0.Y = axisY.getPosition();
p0.Z = axisZ.getPosition();

var power = false;
var trajectories = new Queue();
while (!sections.empty())
{
    var section = sections.pop();
    var points = Interpolator.calculate(section, p0, resolution, axisX1.getMaxVelocity(), axisZ.getMaxVelocity(), acceleration);
    var count = points.length();
    if (count > 0)
    {
        p0 = points[count - 1];
        trajectories.push(points);
        
        if (!power)
        {
            axisX1.powerOn();
            axisX2.powerOn();
            axisY.powerOn();
            axisZ.powerOn();
            power = true;
        }
        if (!ports.busy())
        {
            var points = trajectories.pop();
            positioning.schedule(points);
            positioning.run(sections.empty() ? points : null);
        }
    }
}

while(ports.busy())
{
}

while (!trajectories.empty())
{
    var points = trajectories.pop();
    positioning.schedule(points);
    positioning.run(points);
}

if (power)
{
    axisX1.powerOff();
    axisX2.powerOff();
    axisY.powerOff();
    axisZ.powerOff();
}

/*
var trajectories = new Queue();
while (!sections.empty())
{
    var section = sections.pop();
    var points = Interpolator.calculate(section, p0, resolution, axisX1.getMaxVelocity(), axisZ.getMaxVelocity(), acceleration);
    var count = points.length();
    if (count > 0)
    {
        p0 = points[count - 1];
    }
    trajectories.push(points);
}

axisX1.powerOn();
axisX2.powerOn();
axisY.powerOn();
axisZ.powerOn();

while (!trajectories.empty())
{
    var points = trajectories.pop();
    positioning.schedule(points);
    positioning.run(points);
}

axisX1.powerOff();
axisX2.powerOff();
axisY.powerOff();
axisZ.powerOff();
*/
