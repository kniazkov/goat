/*

Copyright (C) 2017, 2018 Ivan Kniazkov

This file is part of interpreter of programming language
codenamed "Goat" ("Goat interpreter").

Goat interpreter is free software: you can redistribute it and/or
modify it under the terms of the GNU General Public License as published
by the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

Goat interpreter is distributed in the hope that it will be
useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License along
with Goat interpreter.  If not, see <http://www.gnu.org/licenses/>.

*/

import "scanner.goat";
import "token.goat";

var Rule = {
    check : $(token) {
        throw new Exception.NotImplemented();
    },

    "<<" : $(rule) {
        if (defined(this.last)) {
            this.last.next = rule;
        } else {
            this.next = rule;
        }
        this.last = rule;
        return this;
    },

    ">>" : $(rule) {
        rule.prev = this;
        return rule;
    }
};

Rule.Type = Rule -> {
    init : $(type) {
        this.type = type;
    },

    check : $(token) {
        for (var i = 0; i < token.type.length(); i++) {
            if (token.type[i] == type) {
                return this.next || null;
            }
        }
        return false;
    }
};

Rule.Brackets = Rule -> {
    init : $(bracket) {
        this.bracket = bracket;
    },

    check : $(token) {
        if (token.type[0] == Token.Type.BRACKETS)
            if (token.bracket == bracket)
                return this.next || null;
        return false;
    }
};

var Parser = {
    scanner : null,

    init : $(source) {
        this.scanner = new Scanner(source);

        this.graph = {};
        for (var typeIndex in Token.Type) {
            var type = Token.Type[typeIndex];
            graph[type] = new TokenList(type);
        }
    },

    parse : $() {
        var root = new Token.Root();
        this._parseBrackets(null, root.tokens);

        var identifer = $() {
            return new Rule.Type(Token.Type.IDENTIFIER);
        };

        var parentheses = $() {
            return new Rule.Brackets('(');
        };

        var fcall = identifer() << parentheses();
        println(fcall);

        return root;
    },

    _parseBrackets : $(bracket, tokens) {
        while(true) {
            var token = scanner.getToken();
            if (!token) {
                if (bracket != null)
                    throw "Error";
                return;
            }
            if (token.type[0] == Token.Type.BRACKET) {
                if (token.closing) {
                    if (token.pair != bracket)
                        throw "Error";
                    return;
                }
                var result = new Token.Brackets(token);
                this._parseBrackets(token.bracket, result.tokens);
                tokens.push(result);
                this._addTokenToGraph(result);
            } else {
                tokens.push(token);
                this._addTokenToGraph(token);
            }
        }
    },

    _addTokenToGraph : $(token) {
        for (var i = 0; i < token.type.length(); i++) {
            var list = graph[token.type[i]];
            list.push(token);
        }
    },

    _applyRule : $(rule, token) {
        
    }
};