/*

Copyright (C) 2017, 2018 Ivan Kniazkov

This file is part of interpreter of programming language
codenamed "Goat" ("Goat interpreter").

Goat interpreter is free software: you can redistribute it and/or
modify it under the terms of the GNU General Public License as published
by the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

Goat interpreter is distributed in the hope that it will be
useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License along
with Goat interpreter.  If not, see <http://www.gnu.org/licenses/>.

*/

import "iterator.goat";
import "xml.goat";

var Token = {
    type: [],
    refs : {},

    init: $() {
        this.refs = {};        
    },

    getLocation : $() {
        throw new Exception.NotImplemented();
    },

    toString : $() {
        throw new Exception.NotImplemented();
    },

    toXML : $() {
        return new XML.Element(this._getXMLTag());
    },

    _getXMLTag : $() {
        var i;
        var b = new StringBuilder();
        for (i = 0; i < type.length(); i++) {
            if (i > 0)
                b << ':';
            b << type[i];
        }
        return b.toString();
    },

    next : $() {
        var ref = refs[null];
        return ref?.next;
    },

    Type : {
        UNKNOWN: "unknown",
        IDENTIFIER: "identifier",
        BRACKET: "bracket",
        STATIC_STRING: "static_string",
        SEMICOLON: "semicolon",
        BRACKETS : "brackets",
        ROOT : "root"
    }
};

var TokenList = {
    type : Token.Type.UNKNOWN,

    init : $(type) {
        this.type = type;
        this.first = null;
        this.last = null;
    },

    push : $(token) {
        var ref = {};
        token.refs[type] = ref;
        
        ref.list = this;
        ref.prev = last;
        ref.next = null;

        if (first == null) {
            first = token;
        }
        else {
            var prev = last.refs[type];
            prev.next = token;
        }
        last = token;
    },

    iterator : $() {
        return new TokenList.Iterator(type, first);
    },
    
    Iterator : Iterator -> {
        
        type : Token.Type.UNKNOWN,
        token : null,
        
        init : $(type, token) {
            this.type = type;
            this.token = token;
            if (token != null) {
                var ref = token.refs[type];
                this.tnext = ref?.next || null;
            }
            else
                this.tnext = null;
        },
        
        valid : $() {
            return token != null;
        },
        
        next : $() {
            if (!token)
                throw new Exception.InvalidOperation();
            token = tnext;
            if (token != null) {
                var ref = token.refs[type];
                this.tnext = ref?.next || null;
            }
            else
                this.tnext = null;
        },
        
        read : $() {
            if (!token)
                throw new Exception.InvalidOperation();
            return token;
        }
    }
};

Token.Terminal = Token -> {
    location : null,

    getLocation : $() {
        return location;
    }
};

Token.Identifier = Token.Terminal -> {
    type : [ Token.Type.IDENTIFIER ],
    name : "",

    init : $(name) {
        this.name = name;
    },

    toString : $() {
        return name;
    },

    toXML : $() {
        return new XML.Element(this._getXMLTag(), name);
    }
};

Token.Bracket = Token.Terminal -> {
    type : [ Token.Type.BRACKET ],
    bracket : Char.valueOf(0),
    pair : Char.valueOf(0),
    closing : false,

    init : $(bracket, pair, closing) {
        this.bracket = bracket;
        this.pair = pair;
        this.closing = closing;
    },

    toString : $() {
        return bracket;
    },

    toXML : $() {
        var elem = new XML.Element(this._getXMLTag());
        elem.attrib.bracket = bracket;
        return elem;
    }
};

Token.StaticString = Token.Terminal -> {
    type : [ Token.Type.STATIC_STRING ],
    text : "",

    init : $(text) {
        this.text = text;
    },

    toString : $() {
        var b = new StringBuilder();
        b << '\"' << text << '\"';
        return b.toString();
    },

    toXML : $() {
        return new XML.Element(this._getXMLTag(), text);
    }
};

Token.Semicolon = Token.Terminal -> {
    type : [ Token.Type.SEMICOLON ],

    toString : $() {
        return ";";
    }
};

Token.Brackets = Token -> {
    type : [ Token.Type.BRACKETS ],
    bracket : Char.valueOf(0),
    base : null,
    tokens : null,

    init :  $(base) {
        this.base = base;
        this.bracket = base.bracket;
        this.tokens = new TokenList(null);
    },

    getLocation : $() {
        return base.getLocation();
    },

    toString : $() {
        var b = new StringBuilder();
        b << base.bracket;
        for (var i = tokens.iterator(); i.valid(); i.next()) {
            var t = i.read();
            b << t.toString();
        }
        b << base.pair;
        return b.toString();
    },

    toXML : $() {
        var elem = new XML.Element(this._getXMLTag());
        elem.attrib.bracket = bracket;
        for (var i = tokens.iterator(); i.valid(); i.next()) {
            var t = i.read();
            elem.content.push(t.toXML());
        }
        return elem;
    }
};

Token.Root = Token -> {
    type : [ Token.Type.ROOT ],
    tokens : null,

    init :  $() {
        this.tokens = new TokenList(null);
    },

    toString : $() {
        var b = new StringBuilder();
        for (var i = tokens.iterator(); i.valid(); i.next()) {
            var t = i.read();
            b << t.toString();
        }
        return b.toString();
    },

    toXML : $() {
        var elem = new XML.Element(this._getXMLTag());
        for (var i = tokens.iterator(); i.valid(); i.next()) {
            var t = i.read();
            elem.content.push(t.toXML());
        }
        return elem;
    }
};
