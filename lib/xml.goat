/*

Copyright (C) 17..19 Ivan Kniazkov

This file is part of standard library for programming language
codenamed "Goat" ("Goat standard library").

Goat standard library is free software: you can redistribute it and/or
modify it under the terms of the GNU General Public License as published
by the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

Goat standard library is distributed in the hope that it will be
useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License along
with Goat standard library.  If not, see <http://www.gnu.org/licenses/>.

*/

var Xml =
{
    Element :
    {
        tag : "",
        attrib : {},
        data : null,

        init : $(tag, data)
        {
            this.tag = tag;
            this.attrib = {};
            this.data = data || null;
        },

        toString : $(indent)
        {
            var buff = new StringBuilder();
            if (!indent)
                this.buildSimpleString(buff);
            else
                this.buildIndentedString(buff, indent, 0);
            return buff.data();
        },

        buildSimpleString : $(buff)
        {
            buff << '<' << tag;
            for (var name in attrib)
            {
                if (attrib.contains(name))
                {
                    buff << ' ' << name << "=\"";
                    addStringButEscapeEntities(buff, attrib[name]);
                    buff << '\"';
                }
            }
            if (!data)
            {
                buff << "/>";
            }
            else if (data.instanceof(Array))
            {
                var count = data.length();
                if (count > 0)
                {
                    buff << '>';
                    for (var i = 0; i < count; i++)
                    {
                        var item = data[i];
                        if (item.instanceof(Xml.Element))
                            item.buildSimpleString(buff);
                        else
                            addStringButEscapeEntities(buff, item);
                    }
                    buff << "</" << tag << '>';
                }
                else
                {
                    buff << "/>";
                }
            }
            else
            {
                buff << '>';
                if (data.instanceof(Xml.Element))
                    data.buildSimpleString(buff);
                else
                    addStringButEscapeEntities(buff, data);
                buff << "</" << tag << '>';
            }
        },

        buildIndentedString : $(buff, indent, level)
        {
            if (level)
                addIndent(buff, indent, level);
            buff << '<' << tag;
            for (var name in attrib)
            {
                if (attrib.contains(name))
                {
                    buff << ' ' << name << "=\"";
                    addStringButEscapeEntities(buff, attrib[name]);
                    buff << '\"';
                }
            }
            var data = this.data;
            if (!data)
            {
                buff << "/>";
                return;
            }
            if (data.instanceof(Array))
            {
                var count = data.length();
                if (!count)
                {
                    buff << "/>";
                    return;
                }
                if (count > 1)
                {
                    buff << '>';
                    for (var i = 0; i < count; i++)
                    {
                        var item = data[i];
                        if (item.instanceof(Xml.Element))
                        {
                            item.buildIndentedString(buff, indent, level + 1);
                        }
                        else
                        {
                            addIndent(buff, indent, level + 1);
                            addStringButEscapeEntities(buff, item);
                        }
                    }
                    addIndent(buff, indent, level);
                    buff << "</" << tag << '>';
                    return;
                }
                data = data[0];
            }
            buff << '>';
            if (data.instanceof(Xml.Element))
            {
                data.buildIndentedString(buff, indent, level + 1);
                addIndent(buff, indent, level);
            }
            else
            {
                addStringButEscapeEntities(buff, data);
            }
            buff << "</" << tag << '>';
        },

        addIndent : $(buff, indent, level)
        {
            buff << '\n';
            for (var i = 0; i < level; i++)
                buff << indent;
        },

        addStringButEscapeEntities : $(buff, str)
        {
            for (var ch in "" + str)
            {
                switch(ch)
                {
                    case '<':
                        buff << "&lt;";
                        break;
                    case '>':
                        buff << "&gt;";
                        break;
                    case '&':
                        buff << "&amp;";
                        break;
                    case '\"':
                        buff << "&quot;";
                        break;
                    case '\'':
                        buff << "&apos;";
                        break;
                    default:
                        buff  << ch;
                        break;
                }
            }
        }
    }
};
