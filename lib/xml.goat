/*

Copyright (C) 17..19 Ivan Kniazkov

This file is part of standard library for programming language
codenamed "Goat" ("Goat standard library").

Goat standard library is free software: you can redistribute it and/or
modify it under the terms of the GNU General Public License as published
by the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

Goat standard library is distributed in the hope that it will be
useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License along
with Goat standard library.  If not, see <http://www.gnu.org/licenses/>.

*/

var Xml =
{
    Element :
    {
        tag : "",
        attrib : {},
        data : null,

        init : $(tag, data)
        {
            this.tag = tag;
            this.attrib = {};
            this.data = data || null;
        },

        toString : $(indent)
        {
            var buff = new StringBuilder();
            if (!indent)
                this.buildSimpleString(buff);
            else
                this.buildIndentedString(buff, indent, 0);
            return buff.data();
        },

        empty : $()
        {
            return (!data) || (data.instanceof(Array) && data.length() == 0);
        },

        buildSimpleString : $(buff)
        {
            buff << '<' << tag;
            for (var name in attrib)
            {
                if (attrib.contains(name))
                    buff << ' ' << name << "=\"" << attrib[name] << '\"';
            }
            if (this.empty())
            {
                buff << "/>";
            }
            else if (data.instanceof(Array))
            {
                buff << '>';
                var count = data.length();
                for (var i = 0; i < count; i++)
                {
                    var item = data[i];
                    if (item.instanceof(Xml.Element))
                        item.buildSimpleString(buff);
                    else
                        buff << "" + item;
                }
                buff << "</" << tag << '>';
            }
            else
            {
                buff << '>';
                if (data.instanceof(Xml.Element))
                    data.buildSimpleString(buff);
                else
                    buff << "" + data;
                buff << "</" << tag << '>';
            }
        },

        buildIndentedString : $(buff, indent, level)
        {
            if (level)
            {
                buff << '\n';
                for (var i = 0; i < level; i++)
                    buff << indent;
            }
            buff << '<' << tag;
            for (var name in attrib)
            {
                if (attrib.contains(name))
                    buff << ' ' << name << "=\"" << attrib[name] << '\"';
            }
            if (this.empty())
            {
                buff << "/>";
            }
            else if (data.instanceof(Array))
            {
                buff << '>';
                var count = data.length();
                for (var i = 0; i < count; i++)
                {
                    var item = data[i];
                    if (item.instanceof(Xml.Element))
                    {
                        item.buildIndentedString(buff, indent, level + 1);
                    }
                    else
                    {
                        buff << '\n';
                        for (var i = 0; i < level + 1; i++)
                            buff << indent;
                        buff << "" + item;
                    }
                }
                buff << '\n';
                for (var i = 0; i < level; i++)
                    buff << indent;
                buff << "</" << tag << '>';
            }
            else
            {
                buff << '>';
                if (data.instanceof(Xml.Element))
                {
                    data.buildIndentedString(buff, indent, level + 1);
                    buff << '\n';
                    for (var i = 0; i < level; i++)
                        buff << indent;
                }
                else
                {
                    buff << "" + data;
                }
                buff << "</" << tag << '>';
            }
        }
    }
};
