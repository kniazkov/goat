/*

Copyright (C) 17..19 Ivan Kniazkov

This file is part of standard library for programming language
codenamed "Goat" ("Goat standard library").

Goat standard library is free software: you can redistribute it and/or
modify it under the terms of the GNU General Public License as published
by the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

Goat standard library is distributed in the hope that it will be
useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License along
with Goat standard library.  If not, see <http://www.gnu.org/licenses/>.

*/

var Xml =
{
    parse : $(str)
    {
        var elem = new Xml.Element(null);
        var scan = new Xml.Scanner("" + str);
        var parser = new Xml.Parser(scan);
        parser.parseData(elem);
        return elem.data[0];
    },

    Element :
    {
        tag : "",
        attrib : {},
        data : null,

        init : $(tag, data)
        {
            this.tag = tag;
            this.attrib = { };
            this.data = data || [ ];
        },

        append : $(child)
        {
            if (!data)
                data = child;
            else if (data.instanceof(Array))
                data.push(child);
            else
                data = [ data, child ];
        },

        findByTag : $(tag)
        {
            if (!data)
                return [];
            if (data.instanceof(Xml.Element) && data.tag == tag)
                return [ data ];
            
            var result = [];
            for (var item in data)
            {
                if (item.instanceof(Xml.Element) && item.tag == tag)
                    result.push(item);
            }
            return result;
        },

        toString : $(indent)
        {
            var b = new StringBuilder();
            if (!indent)
                this.buildSimpleString(b);
            else
                this.buildIndentedString(b, indent, 0);
            return b.data();
        },

        buildSimpleString : $(b)
        {
            b << '<' << tag;
            for (var name in attrib)
            {
                if (attrib.contains(name))
                {
                    b << ' ' << name << "=\"";
                    addStringButEscapeEntities(b, attrib[name]);
                    b << '\"';
                }
            }
            if (!data)
            {
                b << "/>";
            }
            else if (data.instanceof(Array))
            {
                var count = data.length();
                if (count > 0)
                {
                    b << '>';
                    for (var i = 0; i < count; i++)
                    {
                        var item = data[i];
                        if (item.instanceof(Xml.Element))
                            item.buildSimpleString(b);
                        else
                            addStringButEscapeEntities(b, item);
                    }
                    b << "</" << tag << '>';
                }
                else
                {
                    b << "/>";
                }
            }
            else
            {
                b << '>';
                if (data.instanceof(Xml.Element))
                    data.buildSimpleString(b);
                else
                    addStringButEscapeEntities(b, data);
                b << "</" << tag << '>';
            }
        },

        buildIndentedString : $(b, indent, level)
        {
            if (level)
                addIndent(b, indent, level);
            b << '<' << tag;
            for (var name in attrib)
            {
                if (attrib.contains(name))
                {
                    b << ' ' << name << "=\"";
                    addStringButEscapeEntities(b, attrib[name]);
                    b << '\"';
                }
            }
            var data = this.data;
            if (!data)
            {
                b << "/>";
                return;
            }
            if (data.instanceof(Array))
            {
                var count = data.length();
                if (!count)
                {
                    b << "/>";
                    return;
                }
                if (count > 1)
                {
                    b << '>';
                    for (var i = 0; i < count; i++)
                    {
                        var item = data[i];
                        if (item.instanceof(Xml.Element))
                        {
                            item.buildIndentedString(b, indent, level + 1);
                        }
                        else
                        {
                            addIndent(b, indent, level + 1);
                            addStringButEscapeEntities(b, item);
                        }
                    }
                    addIndent(b, indent, level);
                    b << "</" << tag << '>';
                    return;
                }
                data = data[0];
            }
            b << '>';
            if (data.instanceof(Xml.Element))
            {
                data.buildIndentedString(b, indent, level + 1);
                addIndent(b, indent, level);
            }
            else
            {
                addStringButEscapeEntities(b, data);
            }
            b << "</" << tag << '>';
        },

        addIndent : $(b, indent, level)
        {
            b << '\n';
            for (var i = 0; i < level; i++)
                b << indent;
        },

        addStringButEscapeEntities : $(b, str)
        {
            for (var c in "" + str)
            {
                switch(c)
                {
                    case '<':
                        b << "&lt;";
                        break;
                    case '>':
                        b << "&gt;";
                        break;
                    case '&':
                        b << "&amp;";
                        break;
                    case '\"':
                        b << "&quot;";
                        break;
                    case '\'':
                        b << "&apos;";
                        break;
                    default:
                        b  << c;
                        break;
                }
            }
        }
    },

    Token :
    {
        type : null,
        index : null,
        data : null,
        
        init : $(type, index, data)
        {
            this.type = type;
            this.index = index;
            this.data = data;
        },
        
        OPEN_BRACKET : '<',
        CLOSE_BRACKET : '>',
        SLASH : '/',
        IDENTIFIER : "IDENTIFIER",
        TEXT : "TEXT",
        STRING : "STRING",
        ASSIGN : '='
    },

    Scanner :
    {
        data : "",
        index : 0,
        length : 0,
        
        init : $(data)
        {
            this.data = data;
            this.index = 0;
            this.length = data.length();
        },
        
        get : $()
        {
            return index < length ? data[index] : null;
        },
        
        next : $()
        {
            index++;
            return index < length ? data[index] : null;            
        },
        
        Mode :
        {
            TAG : 0,
            DATA : 1,
        },
        
        isSpace : $(c)
        {
            switch(c)
            {
                case ' ':
                case '\n':
                case '\r':
                case '\t':
                    return true;
                default:
                    return false;
            }
        },
        
        isPartOfIdentifier : $(c)
        {
            if (Xml.Scanner.isSpace(c))
            {
                return false;
            }
            
            switch(c)
            {
                case '!':
                case '\"':
                case '$':
                case '%':
                case '&':
                case '\'':
                case '(':
                case ')':
                case '*':
                case '+':
                case ',':
                case '/':
                case ';':
                case '<':
                case '>':
                case '?':
                case '@':
                case '[':
                case ']':
                case '^':
                case '{':
                case '|':
                case '}':
                case '~':
                case '=':
                    return false;
                default:
                    return true;
            }
        },
        
        isBeginOfIdentifier : $(c)
        {
            return (!(false == Xml.Scanner.isPartOfIdentifier(c) || (c >= '0' && c <= '9') || c == '.' || c == '-'));
        },
        
        parseEntity : $()
        {
            var c = this.next();
            var b = new StringBuilder();
            do
            {
                if (c == ';')
                    break;
                if (c == null)
                    throw new Xml.Error(Xml.Error.UNEXPECTED_END, index);
                if (isPartOfIdentifier(c))
                    b << c;
                else
                    throw new Xml.Error(Xml.Error.INVALID_CHARACTER, index);
                c = this.next();
            } while(true);
            var entity = b.data();
            switch(entity)
            {
                case "lt":
                    return '<';
                case "gt":
                    return '>';
                case "amp":
                    return '&';
                case "apos":
                    return '\'';
                case "quot":
                    return '\"';
                default:
                    throw new Xml.Error(Xml.Error.UNKNOWN_ENTITY, index);
            }
        },
        
        getToken : $(mode)
        {
            var c = this.get();
            
            while(isSpace(c))
                c = this.next();
            
            var i = index;
            
            switch(c)
            {
                case null:
                    return null;                    
                case '<':
                    c = this.next();
                    if (c == '!') // <![CDATA[ ? or comment <!--
                    {
                        i = index;
                        c = this.next();
                        if (c == '-')
                        {
                            c = this.next();
                            if (c != '-')
                                throw new Xml.Error(Xml.Error.INVALID_SEQUENCE, index);
                            // comment starts: <!--
                            while(true)
                            {
                                var c0 = this.next();
                                if (c0 == null)
                                    throw new Xml.Error(Xml.Error.UNEXPECTED_END, index);
                                else if (c0 == '-')
                                {
                                    var c1 = this.next();
                                    if (c1 == null)
                                        throw new Xml.Error(Xml.Error.UNEXPECTED_END, index);
                                    else if (c1 == '-')
                                    {
                                        while(true)
                                        {
                                            var c2 = this.next();
                                            if (c2 == null)
                                                throw new Xml.Error(Xml.Error.UNEXPECTED_END, index);
                                            else if (c2 == '>')
                                            {
                                                this.next();
                                                return this.getToken(mode);
                                            }
                                            else if (c2 != '-')
                                                break;
                                        }
                                    }
                                }
                            }
                        }
                        var b = new StringBuilder();
                        do
                        {
                            b << c;
                            c = this.next();
                        } while(c != '[' && c != null);
                        if (c == null)
                            throw new Xml.Error(Xml.Error.UNEXPECTED_END, index);
                        if (b.data() != "[CDATA")
                            return new Xml.Token(Xml.Token.EXPECTED_CDATA_SEQUENCE, i);
                        i = index;
                        b = new StringBuilder();
                        while(true)
                        {
                            var c0 = this.next();
                            if (c0 == null)
                                throw new Xml.Error(Xml.Error.UNEXPECTED_END, index);
                            else if (c0 != ']')
                                b << c0;
                            else
                            {
                                var c1 = this.next();
                                if (c1 == null)
                                    throw new Xml.Error(Xml.Error.UNEXPECTED_END, index);
                                else if (c1 != ']')
                                {
                                    b << c0;
                                    b << c1;
                                }
                                else
                                {
                                    var c2 = this.next();
                                    if (c2 == null)
                                        throw new Xml.Error(Xml.Error.UNEXPECTED_END, index);
                                    else if (c2 != '>')
                                    {
                                        b << c0;
                                        b << c1;
                                        b << c2;
                                    }
                                    else
                                    {
                                        this.next();
                                        return new Xml.Token(Xml.Token.TEXT, i, b.data());
                                    }
                                }
                            }
                        }
                    }
                    else
                    {
                        return new Xml.Token(Xml.Token.OPEN_BRACKET, i);
                    }
                case '>':
                    this.next();
                    return new Xml.Token(Xml.Token.CLOSE_BRACKET, i);
            }
            
            switch(mode)
            {
                case Xml.Scanner.Mode.TAG:
                    if (c ==  '/')
                    {
                        this.next();
                        return new Xml.Token(Xml.Token.SLASH, i);
                    }
                    if (c ==  '=')
                    {
                        this.next();
                        return new Xml.Token(Xml.Token.ASSIGN, i);
                    }
                    if (isBeginOfIdentifier(c))
                    {
                        var b = new StringBuilder();
                        do
                        {
                            b << c;
                            c = this.next();
                        } while(isPartOfIdentifier(c));
                        return new Xml.Token(Xml.Token.IDENTIFIER, i, b.data());
                    }
                    if (c == '\"')
                    {
                        var b = new StringBuilder();
                        c = this.next();
                        while(c != '\"')
                        {
                            if (c == null)
                                throw new Xml.Error(Xml.Error.UNEXPECTED_END, index);
                            if (c == '&')
                                b << this.parseEntity();
                            else
                                b << c;
                            c = this.next();
                        }
                        this.next();
                        return new Xml.Token(Xml.Token.STRING, i, b.data());
                    }
                    if (c == '\'')
                    {
                        var b = new StringBuilder();
                        c = this.next();
                        while(c != '\'')
                        {
                            if (c == null)
                                throw new Xml.Error(Xml.Error.UNEXPECTED_END, index);
                            if (c == '&')
                                b << this.parseEntity();
                            else
                                b << c;
                            c = this.next();
                        }
                        this.next();
                        return new Xml.Token(Xml.Token.STRING, i, b.data());
                    }
                    break;
                    
                case Xml.Scanner.Mode.DATA:
                    var b = new StringBuilder();
                    do
                    {
                        if (c == '&')
                            b << this.parseEntity();
                        else
                            b << c;
                        c = this.next();
                    } while(c != '<' && c != '>' && c != null);
                    return new Xml.Token(Xml.Token.TEXT, i, b.data());
            }
            
            throw new Xml.Error(Xml.Error.INVALID_CHARACTER, index);
        }
    },
    
    Error : Exception ->
    {
        type : null,
        index : null,
        
        init : $(type, index)
        {
            this.type = type;
            this.index = index;
        },
        
        INVALID_TOKEN : "invalid token",
        EXPECTED_TAG_NAME : "expected tag name",
        UNEXPECTED_END : "unexpected end",
        END_TAG_MISMATCH : "end tag does not match the start tag",
        UNCLOSED_END_TAG : "end element was missing the character \'>\'",
        MISSING_EQUALS : "missing \'=\' sign between attribute and attribute value",
        MISSING_STRING : "a string literal was expected",
        DUPLICATE_ATTRIBUTE: "duplicate attribute",
        UNKNOWN_ENTITY: "unknown entity",
        INVALID_CHARACTER: "invalid character",
        EXPECTED_CDATA_SEQUENCE: "expected <![CDATA[ sequence",
        INVALID_SEQUENCE: "invalid sequence"
    },
    
    Parser :
    {
        scan : null,
        
        init : $(scan)
        {
            this.scan = scan;
        },
        
        parseData : $(elem)
        {
            while(true)
            {
                var tok = scan.getToken(Xml.Scanner.Mode.DATA);
                
                if (!tok)
                {
                    if (elem.tag != null)
                        throw new Xml.Error(Xml.Error.UNEXPECTED_END, scan.index);
                    return;
                }
                else if (tok.type == Xml.Token.OPEN_BRACKET)                // <
                {
                    var next = scan.getToken(Xml.Scanner.Mode.TAG); 
                    if (next.type == Xml.Token.IDENTIFIER)                  // <tag
                        elem.append(this.parseTag(next.data));
                    else if (next.type == Xml.Token.SLASH)                  // </
                    {
                        var ident = scan.getToken(Xml.Scanner.Mode.TAG);
                        if (!ident)
                            throw new Xml.Error(Xml.Error.EXPECTED_TAG_NAME, scan.index);
                        if (ident.type != Xml.Token.IDENTIFIER)
                            throw new Xml.Error(Xml.Error.EXPECTED_TAG_NAME, ident.index);
                        if (ident.data != elem.tag)
                            throw new Xml.Error(Xml.Error.END_TAG_MISMATCH, ident.index);
                        var bracket = scan.getToken(Xml.Scanner.Mode.TAG);
                        if (!bracket)
                            throw new Xml.Error(Xml.Error.UNCLOSED_END_TAG, scan.index);
                        if (bracket.type != Xml.Token.CLOSE_BRACKET)
                            throw new Xml.Error(Xml.Error.UNCLOSED_END_TAG, bracket.index);
                        return;
                    }
                    else
                    {
                        throw new Xml.Error(Xml.Error.INVALID_TOKEN, next.index);
                    }
                }
                else if (tok.type == Xml.Token.TEXT)
                {
                    elem.append(tok.data);
                }
                else
                {
                    throw new Xml.Error(Xml.Error.INVALID_TOKEN, tok.index);
                }
            }
        },
        
        parseTag : $(name)
        {
            var elem = new Xml.Element(name);
            while(true)
            {
                var tok = scan.getToken(Xml.Scanner.Mode.TAG);
                if (!tok)
                    throw new Xml.Error(Xml.Error.UNEXPECTED_END, scan.index);
                if (tok.type == Xml.Token.CLOSE_BRACKET)
                {
                    this.parseData(elem);
                    var len = elem.data.length();
                    if (len == 0)
                        elem.data = null;
                    else if (len == 1)
                        elem.data = elem.data[0];
                    return elem;
                }
                else if (tok.type == Xml.Token.SLASH)
                {
                    var bracket = scan.getToken(Xml.Scanner.Mode.TAG);
                    if (!bracket)
                        throw new Xml.Error(Xml.Error.UNCLOSED_END_TAG, scan.index);
                    if (bracket.type != Xml.Token.CLOSE_BRACKET)
                        throw new Xml.Error(Xml.Error.UNCLOSED_END_TAG, bracket.index);
                    return elem;
                }
                else if (tok.type == Xml.Token.IDENTIFIER)
                {
                    var oper = scan.getToken(Xml.Scanner.Mode.TAG);
                    if (!oper)
                        throw new Xml.Error(Xml.Error.MISSING_EQUALS, scan.index);
                    if (oper.type != Xml.Token.ASSIGN)
                        throw new Xml.Error(Xml.Error.MISSING_EQUALS, oper.index);
                    var value = scan.getToken(Xml.Scanner.Mode.TAG);
                    if (!value)
                        throw new Xml.Error(Xml.Error.MISSING_STRING, scan.index);
                    if (value.type != Xml.Token.STRING)
                        throw new Xml.Error(Xml.Error.MISSING_STRING, value.index);
                    if (!!(elem.attrib[tok.data]))
                        throw new Xml.Error(Xml.Error.DUPLICATE_ATTRIBUTE, tok.index);
                    elem.attrib[tok.data] = value.data;
                }
                else
                {
                    throw new Xml.Error(Xml.Error.INVALID_TOKEN, tok.index);
                }                
            }
        }
    }
};
