/*

Copyright (C) 17..19 Ivan Kniazkov

This file is part of standard library for programming language
codenamed "Goat" ("Goat standard library").

Goat standard library is free software: you can redistribute it and/or
modify it under the terms of the GNU General Public License as published
by the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

Goat standard library is distributed in the hope that it will be
useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License along
with Goat standard library.  If not, see <http://www.gnu.org/licenses/>.

*/

import "mutex.goat";

var Timer = $()
{
    var Timer =
    {
        setTimer : $(callback, duration)
        {
            if (!callback.instanceof(Function) || !duration.instanceof(Timer.Duration))
                throw new Exception.IllegalArgument();

            var time = duration.getNanoseconds();
            var runner;
            if (callback.instanceof(Thread))
                runner = callback.delay(time);
            else
            {
                var thr = $$() { callback(); };
                runner = thr.delay(time);
            }
        },

        setInterval : $(callback, period)
        {
            if (!callback.instanceof(Function) || !period.instanceof(Timer.Duration))
                throw new Exception.IllegalArgument();

            var delta = period.getNanoseconds();
            var moment = clock() + delta;
            var interval = new Timer.Interval();
            var skips = 1;
            var thr = $$()
            {
                interval.count++;
                callback();
                interval.mutex.lock();
                if (interval.next)
                {
                    var delay;
                    var integral = 0;
                    while (true)
                    {
                        moment += delta;
                        delay = moment - clock();
                        if (delay > 0)
                        {
                            interval.skipped += skips - 1;
                            break;
                        }
                        integral -= delay;
                        if (integral > delta * 8) // interval too short
                        {
                            delta *= 2;
                            skips *= 2;
                            integral = 0;
                        }
                        interval.skipped += skips;
                    }
                    interval.runner = thr.delay(delay);
                }
                interval.mutex.unlock();
            };
            interval.runner = thr.delay(delta);
            return interval;
        }
    };

    Timer.Interval =
    # {
        init : $()
        {
            this.count = 0;
            this.skipped = 0;
            this.mutex = new Mutex();
            this.next = true;
            this.runner = null;
        },

        stop : $()
        {
            mutex.lock();
            next = false;
            if (runner && !runner.works())
                runner.kill();
            mutex.unlock();
        }
    };

    Timer.Duration =
    # {
        getNanoseconds : $()
        {
            return 0;
        }
    };

    Timer.Seconds = Timer.Duration ->
    # {
        init : $(value)
        {
            this.value = value;
        },

        getNanoseconds : $()
        {
            return value * 1000000000;
        }
    };

    Timer.Milliseconds = Timer.Duration ->
    # {
        init : $(value)
        {
            this.value = value;
        },

        getNanoseconds : $()
        {
            return value * 1000000;
        }
    };

    Timer.Microseconds = Timer.Duration ->
    # {
        init : $(value)
        {
            this.value = value;
        },

        getNanoseconds : $()
        {
            return value * 1000;
        }
    };

    Timer.Nanoseconds = Timer.Duration ->
    # {
        init : $(value)
        {
            this.value = value;
        },

        getNanoseconds : $()
        {
            return value;
        }
    };
    
    return #Timer;
}();
