/*

Copyright (C) 2017, 2018 Ivan Kniazkov

This file is part of standard library for programming language
codenamed "Goat" ("Goat standard library").

Goat standard library is free software: you can redistribute it and/or
modify it under the terms of the GNU General Public License as published
by the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

Goat standard library is distributed in the hope that it will be
useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License along
with Goat standard library.  If not, see <http://www.gnu.org/licenses/>.

*/

import "iterator.goat";

var List = Iterable -> {

    init : $() {
        this.first = null;
        this.last = null;
    },

    empty : $() {
        return first == null;
    },

    ListIsEmpty : Exception -> {
    },

    _check : $() {
        // TODO: remove this method
        var item = first;
        while(item != null) {
            if (item.prev != null) {
                if (item.prev.next != item) {
                    throw "corrupted previos " + item.val + " " + item.next.val;
                }
            }
            if (item.next != null) {
                if (item.next.prev != item) {
                    throw "corrupted next " + item.val + " " + item.prev.val;
                }
            }
            item = item.next;
        }
    },

    pushf : $(val) {
        var item = {
            prev : null,
            next : first,
            val : val
        };

        if (last != null)
            first.prev = item;
        else
            last = item;
        first = item;
    },

    push : $(val) {
        var item = {
            prev : last,
            next : null,
            val : val
        };

        if (first != null)
            last.next = item;
        else
            first = item;
        last = item;
    },

    popf : $() {
        if (first == null)
            throw new ListIsEmpty();
        var item = first;
        first = first.next;
        if (first == null)
            last = null;
        return item.val;
    },

    pop : $() {
        if (last == null)
            throw new ListIsEmpty();
        var item = last;
        last = last.prev;
        if (last == null)
            first = null;
        return item.val;
    },

    peekf : $() {
        if (first == null)
            throw new ListIsEmpty();
        return first.val;
    },

    peek : $() {
        if (last == null)
            throw new ListIsEmpty();
        return last.val;
    },

    remove : $(begin, end) {
        if (!begin.item)
            throw new Exception.InvalidOperation();
        if (begin.list != this)
            throw new Exception.IllegalArgument();
        
        begin = begin.item;
        
        if (end != void) {
            if (!end.instanceOf(List.Iterator))
                throw new Exception.IllegalArgument();
            if (end.list != this)
                throw new Exception.IllegalArgument();
            end = end.item;
        }
        else
            end = begin;

        if (begin.prev != null)
            begin.prev.next = end.next;
        else
            first = end.next;

        if (end.next != null)
            end.next.prev = begin.prev;
        else
            last = begin.prev;
    },

    iterator : $() {
        return new List.Iterator(this, first);
    },

    insert : $(iter, val) {
        if (iter.list != this)
            throw new Exception.IllegalArgument();
        
        var next = iter.item;
        
        if (next == null) {
            this.push(val);
            return;
        }

        var item = {
            prev : next.prev,
            next : next,
            val : val
        };

        if (next.prev != null)
            next.prev.next = item;
        else
            first = item;
        next.prev = item;
    },
    
    ascend : $(val) {
        var next = first;

        while (next != null) {
            if (next.val < val) {
                next = next.next;
            }
            else {
                var item = {
                    prev : next.prev,
                    next : next,
                    val : val
                };

                if (next.prev != null)
                    next.prev.next = item;
                else
                    first = item;
                next.prev = item;

                return;
            }
        }
        this.push(val);
    },

    clear : $() {
        first = null;
        last = null;
    },

    Iterator : Iterator -> {
        
        list : null,
        item : null,
        
        init : $(list, item) {
            this.list = list;
            this.item = item;
        },
        
        valid : $() {
            return item != null;
        },
        
        next : $() {
            if (!item)
                throw new Exception.InvalidOperation();
            item = item.next;
        },
        
        read : $() {
            if (!item)
                throw new Exception.InvalidOperation();
            return item.val;
        },
        
        write : $(val) {
            if (!item)
                throw new Exception.InvalidOperation();
            item.val = val;
        },

        remove : $(iter) {
            if (!iter)
                iter = this;
            if (!iter.item)
                throw new Exception.InvalidOperation();

            var following = iter.item.next;
            list.remove(this, iter);
            item = following;
        }
    }
};