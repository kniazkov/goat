/*

Copyright (C) 17..19 Ivan Kniazkov

This file is part of standard library for programming language
codenamed "Goat" ("Goat standard library").

Goat standard library is free software: you can redistribute it and/or
modify it under the terms of the GNU General Public License as published
by the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

Goat standard library is distributed in the hope that it will be
useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License along
with Goat standard library.  If not, see <http://www.gnu.org/licenses/>.

*/

var List =
{
    init : $()
    {
        this.first = null;
        this.last = null;
        this.count = 0;
    },

    push : $(value)
    {
        var item =
        {
            previous : last,
            next : null,
            value : value
        };
        if (last != null)
            last.next = item;
        else
            first = item;
        last = item;
        count++;
    },

    pushf : $(value)
    {
        var item =
        {
            previous : null,
            next : first,
            value : value
        };
        if (first != null)
            first.previous = item;
        else
            last = item;
        first = item;
        count++;
    },

    pop : $()
    {
        if (last == null)
            return undefined;
        count--;
        var item = last;
        if (count != 0)
            item.previous.next = null;
        else
            first = null;
        last = item.previous;
        item.previous = null;
        return item.value;
    },

    popf : $()
    {
        if (first == null)
            return undefined;
        count--;
        var item = first;
        if (count != 0)
            item.next.previous = null;
        else
            last = null;
        first = item.next;
        item.next = null;
        return item.value;
    },

    iterator : $()
    {
        return new _Iterator(first);
    },

    _Iterator : Iterator ->
    {
        init : $(item)
        {
            this.item = item;
        },

        valid : $()
        {
            return item != null;
        },

        next : $()
        {
            if (item == null)
                return undefined;
            var value = item.value;
            item = item.next;
            return value;
        }
    }
};
