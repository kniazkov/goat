/*

Copyright (C) 17..19 Ivan Kniazkov

This file is part of standard library for programming language
codenamed "Goat" ("Goat standard library").

Goat standard library is free software: you can redistribute it and/or
modify it under the terms of the GNU General Public License as published
by the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

Goat standard library is distributed in the hope that it will be
useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License along
with Goat standard library.  If not, see <http://www.gnu.org/licenses/>.

*/

import "queue.goat";

var Mutex =
# {
    init : $()
    {
        this.locker = null;
        this.count = 0;
        this.queue = new Queue();
    },

    tryLock : $() {
        var result = false;
        var ct = Thread.current();
        lock
        {
            if (ct == locker)
            {
                ++count;
                result = true;
            }
            else
            {
                if (locker == null)
                {
                    locker = ct;
                    count = 1;
                    result = true;
                }
            }
        }
        return result;
    },

    lock : $()
    {
        while (!this.tryLock())
        {
            var ct = Thread.current();
            lock
            {
                queue.push(ct);
            }
            ct.suspend();
        }
    },

    unlock : $()
    {
        if (Thread.current() == locker)
        {
            lock
            {
                --count;
                if (!count)
                {
                    locker = null;
                    if (!queue.empty())
                    {
                        var pending = queue.pop();
                        pending.resume();
                    }
                }
            }
            return true;
        }
        return false;
    }
};