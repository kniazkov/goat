/*

Copyright (C) 2017-2020 Ivan Kniazkov

This file is part of standard library for programming language
codenamed "Goat" ("Goat standard library").

Goat standard library is free software: you can redistribute it and/or
modify it under the terms of the GNU General Public License as published
by the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

Goat standard library is distributed in the hope that it will be
useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License along
with Goat standard library.  If not, see <http://www.gnu.org/licenses/>.

*/

import "timer.goat";

var StepperMotorParameters =
# {
    gpioEnable : "null",
    gpioStep : "null",
    gpioDirection : "null",
    scalingFactor : 1,
    listener : null
};

var StepperMotor =
# {
    init : $(params)
    {
        if (!params.instanceof(StepperMotorParameters))
            throw new Exception.IllegalArgument();

        for (var key in params)
        {
            if (params.contains(key))
                this[key] = params[key];
        }
        this.position = 0;
        this.interval = null;
        this.period = 0;
        this.direction = 0;
        this.targetPosition = null;
    },

    setVelocity : $(velocity)
    {
        if (velocity == 0)
        {
            if (interval)
            {
                interval.stop();
                interval = null;
            }
            period = 0;
            direction = 0;
            return;
        }
        var period = round(500000 / scalingFactor / abs(velocity));
        var direction = velocity > 0 ? 1 : (-1);
        if (this.period == period && this.direction == direction)
            return;
        if (interval)
            interval.stop();
        port[gpioDirection] = direction == 1;
        var gpioStep = gpioStep;
        interval = Timer.setInterval($()
        {
            var value = port[gpioStep];
            port[gpioStep] = !value;
            if (value)
            {
                position += direction;
                if (targetPosition == position)
                {
                    interval.stop();
                    interval = null;
                    period = null;
                    direction = null;
                    if (listener)
                        listener(position / scalingFactor);
                }
            }
        }, new Timer.Microseconds(period));
    },

    setTargetPosition : $(position, velocity)
    {
        targetPosition = round(position * scalingFactor);
        if (targetPosition == this.position)
        {
            if (listener)
                listener(this.position / scalingFactor);
            return;
        }
        if (targetPosition > this.position)
            this.setVelocity(abs(velocity));
        else
            this.setVelocity(-abs(velocity));
    },

    getPosition : $()
    {
        return position / scalingFactor;
    }
};
