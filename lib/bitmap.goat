/*

Copyright (C) 2017-2020 Ivan Kniazkov

This file is part of standard library for programming language
codenamed "Goat" ("Goat standard library").

Goat standard library is free software: you can redistribute it and/or
modify it under the terms of the GNU General Public License as published
by the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

Goat standard library is distributed in the hope that it will be
useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License along
with Goat standard library.  If not, see <http://www.gnu.org/licenses/>.

*/

import "type.goat";
import "struct.goat";

var Bitmap =
# {
    get : $(x, y)
    {
        return new Color();
    },

    set : $(x, y, c)
    {
        return c;
    },

    size : $()
    {
        return new Rectangle();
    },

    drawRect : $(x1, y1, x2, y2, c)
    {
        for (var x = x1; x <= x2; x++)
        {
            this.set(x, y1, c);
            this.set(x, y2, c);
        }

        for (var y = y1; y <= y2; y++)
        {
            this.set(x1, y, c);
            this.set(x2, y, c);
        }
    }
};

var FullBitmap = Bitmap ->
# {
    init : $(w, h)
    {
        if (w > 0 && h > 0)
        {
            this.w = w;
            this.h = h;
            this.r = [];
            this.g = [];
            this.b = [];
            this.a = [];
        }
        else
            throw new Exception.IllegalArgument();
    },

    get : $(x, y)
    {
        if (x < 0 || x >= w || y < 0 || y >= h)
            return new Color();
        var i = y * w + x;
        var c = new Color();
        if (r[i].instanceof(Number))
        {
            c.r = r[i];
            c.g = g[i];
            c.b = b[i];
            c.a = a[i];
        }
        return c;
    },

    set : $(x, y, c)
    {
        if (!(x < 0 || x >= w || y < 0 || y >= h))
        {
            var i = y * w + x;
            r[i] = c.r;
            g[i] = c.g;
            b[i] = c.b;
            a[i] = c.a || 0.0;            
        }
        return c;
    },

    size : $()
    {
        var r = new Rectangle();
        r.w = w;
        r.h = h;
        return r;
    }
};

var Bmp24 = Bitmap ->
# {
    init : $(w, h)
    {
        if (w > 0 && h > 0)
        {
            this.w = w;
            this.h = h;
            this.data = new ByteArray();

            var h1 = new Struct();
            h1.declare("bfType", 2, "BM");
            h1.declare("bfSize", 4);
            h1.declare("bfReserved1", 2, 0);
            h1.declare("bfReserved2", 2, 0);
            h1.declare("bfOffBits", 4);

            var h2 = new Struct();
            h2.declare("biSize", 4, 40);
            h2.declare("biWidth", 4, w);
            h2.declare("biHeight", 4, h);
            h2.declare("biPlanes", 2, 1);
            h2.declare("biBitCount", 2, 24);
            h2.declare("biCompression", 4, 0);
            h2.declare("biSizeImage", 4, 0);
            h2.declare("biXPelsPerMeter", 4, 0);
            h2.declare("biYPelsPerMeter", 4, 0);
            h2.declare("biClrUsed", 4, 0);
            h2.declare("biClrImportant", 4, 0);

            this.start = h1.size() + h2.size();
            this.rowSize = 3 * w;
            while (rowSize % 4)
                rowSize++;
            var arraySize = rowSize * h;

            h1["bfSize"] = start + arraySize;
            h1["bfOffBits"] = start;

            h1.toByteArray(data);
            h2.toByteArray(data);
            
            for (var i = 0; i < arraySize; i++)
            {
                data.push(0);
            }
        }
        else
            throw new Exception.IllegalArgument();
    },

    get : $(x, y)
    {
        if (x < 0 || x >= w || y < 0 || y >= h)
            return new Color();
        var i = start + (h - y - 1) * rowSize + x * 3;
        var c = new Color();
        c.r = data[i + 2] / 255.0;
        c.g = data[i + 1] / 255.0;
        c.b = data[i]     / 255.0;
        c.a = 0.0;
        return c;
    },

    set : $(x, y, c)
    {
        if (!(x < 0 || x >= w || y < 0 || y >= h))
        {
            var i = start + (h - y - 1) * rowSize + x * 3;
            data[i + 2] = round(c.r * 255);
            data[i + 1] = round(c.g * 255);
            data[i]     = round(c.b * 255);
        }
        return c;
    },

    size : $()
    {
        var r = new Rectangle();
        r.w = w;
        r.h = h;
        return r;
    },

    toByteArray : $()
    {
        return data;
    }
};