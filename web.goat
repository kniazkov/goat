var HttpServer =
$()
{
    var dll = dlopen("../goat-web/goat-web.dll");
    var extCreate = dll.bind("create_server");
    var extTick = dll.bind("tick");

    var isUrlEncoded = $(url)
    {
        var i, 
            l = url.length();
        for (i = 0; i < l; i++)
        {
            var c = url[i];
            if (c == '%' || c == '+')
                return true;
        }
        return false;
    };

    var decodeHex = $(c)
    {
        if (c >= '0' && c <= '9')
            return Integer.valueof(c) - Integer.valueof('0');
        if (c >= 'a' && c <= 'f')
            return Integer.valueof(c) - Integer.valueof('a') + 10;
        if (c >= 'A' && c <= 'F')
            return Integer.valueof(c) - Integer.valueof('A') + 10;
    };

    var decodeUrl = $(url)
    {
        var i = 0, 
            l = url.length();
        var buff = new StringBuilder();
        while(i < l)
        {
            var c = url[i];
            if (c == '+')
            {
                buff << ' ';
            }
            else if (c == '%')
            {
                var c1 = url[++i];
                var c2 = url[++i];
                var b1 = (decodeHex(c1) << 4) + decodeHex(c2);
                if (b1 < 128)
                {
                    buff << Char.valueof(b1);
                }
                else
                {
                    ++i;
                    var c3 = url[++i];
                    var c4 = url[++i];
                    var b2 = (decodeHex(c3) << 4) + decodeHex(c4);
                    buff << Char.valueof(((b1 & 31) << 6) + (b2 & 63));
                }
            }
            else
            {
                buff << c;
            }
            i++;
        }
        return buff.string();
    };

    var findSample = $(buffer, sample, startIndex)
    {
        var i = startIndex,
            j,
            il = buffer.length(),
            jl = sample.length();

        while(i < il - jl)
        {
            var found = true;
            for (j = 0; j < jl; j++)
            {
                if (Char.valueof(buffer[i + j]) != sample[j])
                {
                    found = false;
                    break;
                }
            }
            if (found)
                return i;
            i++;
        }
        return -1;
    };

    var splitBuffer = $(buffer, sample)
    {
        var result = [];
        var i = 0,
            j,
            l = sample.length();
        j = findSample(buffer, sample, i);
        while(j != -1)
        {
            result.push(buffer.slice(i, j - i)); 
            i = j + l;
            j = findSample(buffer, sample, i);
        }
        result.push(buffer.slice(i));
        return result;
    };

    var obj = { };

    obj.create = $(port, handler)
    {
        var callback = $(request)
        {
            var params = {};
            if (request.queryString != "")
            {
                for (var param in request.queryString.split('&'))
                {
                    var pair = param.split('=');
                    var key = pair[0];
                    if (isUrlEncoded(key))
                        key = decodeUrl(key);
                    var value = pair[1];
                    if (isUrlEncoded(value))
                        value = decodeUrl(value);
                    params[key] = value;
                }
            }

            if (request.body.length() > 0)
            {
                var contentType = request.headers["Content-Type"];
                if (contentType && contentType.find("multipart/form-data") >= 0)
                {
                    var boundaryIdx = contentType.find("boundary=");
                    if (boundaryIdx >= 0)
                    {
                        var boundary = contentType.substr(boundaryIdx + 9);
                        println(boundary);
                        for(var part in splitBuffer(request.body, "--" + boundary))
                        {
                            if (part.length() > 16)
                            {
                                var separatorIdx = findSample(part, "\r\n\r\n", 0);
                                if (separatorIdx >= 0)
                                {
                                    var headers = part.slice(0, separatorIdx);
                                    headers = headers.decode("utf8");
                                    var data = part.slice(separatorIdx + 4, part.length() - separatorIdx - 6);
                                    println(headers);
                                    println(data);
                                }
                            }
                        }
                    }
                }
            }

            return handler(params);
        };

        var instance = extCreate(port, callback);

        if (!instance)
            return null;

        var obj = {};
        obj.tick = $()
        {
            extTick(instance);
        };
        return obj;
    };

    return obj;
}();

//////////////////////////////////////////////

var counter = 0;

var server = HttpServer.create(8001, $(request)
{
    println("request: " + request);

    counter++;

    var response = "Counter value: " + counter;
    return {
        content: response.encode("utf8"),
        type: "text/html"
    };
});

while(true)
{
    server.tick();
}
